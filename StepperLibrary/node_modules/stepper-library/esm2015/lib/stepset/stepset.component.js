/**
 * @fileoverview added by tsickle
 * Generated from: lib/stepset/stepset.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Output, Input, ElementRef, Renderer2, ViewChild } from '@angular/core';
export class StepsetComponent {
    /**
     * @param {?} rd
     */
    constructor(rd) {
        this.rd = rd;
        this.steps = [];
        this.stepNo = 0;
        this.totalSteps = 0;
        this.btnPos = 'btn-left';
        this.next = new EventEmitter();
        this.submitEvent = new EventEmitter();
        this.radius = 35;
        this.strokeDashOffset = Math.PI * 2 * this.radius;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.steps[0].active = true;
    }
    /**
     * @param {?} step
     * @return {?}
     */
    addStep(step) {
        this.totalSteps = this.steps.push(step);
    }
    /**
     * @param {?} i
     * @return {?}
     */
    jumpToStep(i) {
        if (this.steps[i > 0 ? i - 1 : i].valid) {
            this.stepNo = i;
            this.setActiveStep(this.stepNo);
        }
    }
    /**
     * @return {?}
     */
    nextStep() {
        if (this.steps[this.stepNo].form[0]['valid']) {
            this.steps[this.stepNo].valid = true;
            this.stepNo < this.totalSteps ? this.setActiveStep(++this.stepNo) : null;
            this.next.emit(this.steps[this.stepNo].valid);
        }
    }
    /**
     * @return {?}
     */
    setProgressbarColor() {
        this.progressValue = Math.floor(100 / (this.totalSteps - 1)) * this.stepNo - 100;
        this.rd.setStyle(this.circularBar.nativeElement, 'stroke-dashoffset', ((100 - this.progressValue) / 100) * (Math.PI * (2 * this.radius)) - this.strokeDashOffset);
    }
    /**
     * @return {?}
     */
    prevStep() {
        this.stepNo > 0 ? this.setActiveStep(--this.stepNo) : null;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    setActiveStep(index) {
        this.setProgressbarColor();
        this.steps.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => {
            s.active = false;
        }));
        this.steps[index].active = true;
    }
    /**
     * @return {?}
     */
    submit() {
        this.submitEvent.emit(true);
    }
}
StepsetComponent.decorators = [
    { type: Component, args: [{
                selector: 'stepset',
                template: "<div id=\"stepset-container\">\n  <div id=\"lg-progress\">\n    <div id=\"step-nav\">\n      <div *ngFor=\"let s of steps;let i=index\" (click)=\"jumpToStep(i)\" [ngClass]=\"i < stepNo ? 'validStep' : ''\">\n        {{i+1}}<p>{{s.title}}</p>\n      </div>\n      <svg id=\"line-progress\" height=7>\n        <g id=\"progress-container\">\n          <line x1=\"0\" y1=\"50%\" x2=\"100%\" y2=\"50%\" stroke-width=7 />\n        </g>\n        <g id=\"progress-content\">\n          <line x1=\"0\" y1=\"50%\" x2=\"100%\" y2=\"50%\" stroke-width=7 fill=\"transparent\" stroke-dasharray=\"0%\"\n            stroke-dashoffset=\"0%\" #progressbar [ngStyle]=\"{'transform':'translateX('+ progressValue +'%)'}\" />\n        </g>\n      </svg>\n    </div>\n  </div>\n\n  <div id=\"xs-progress\">\n    <span class=\"step-display\">{{this.stepNo+1}} of {{this.totalSteps}}</span>\n    <svg id=\"svg\" width=\"100\" height=\"100\">\n      <circle [attr.r]='radius' cx=\"50\" cy=\"50\" fill=\"transparent\" [attr.stroke-dasharray]=\"strokeDashOffset\"\n        stroke-dashoffset=\"0\"></circle>\n      <circle #bar id=\"bar\" [attr.r]='radius' cx=\"50\" cy=\"50\" fill=\"transparent\"\n        [attr.stroke-dasharray]=\"strokeDashOffset\" [attr.stroke-dashoffset]='strokeDashOffset'></circle>\n    </svg>\n    <h3 class=\"title\">\n      {{steps[stepNo]?.title}}\n    </h3>\n  </div>\n  <div id=\"content-container\">\n    <ng-content></ng-content>\n    <hr>\n    <div id=\"buttons\" [ngClass]=\"btnPos\">\n      <button class=\"prev-btn\" (click)=\"prevStep()\">Back</button>\n      <button class=\"next-btn\" (click)=\"nextStep()\" *ngIf=\"totalSteps > stepNo+1\">Next</button>\n      <button (click)=\"submit()\" [ngStyle]=\"styles\" *ngIf=\"totalSteps == stepNo+1\">Finish</button>\n    </div>\n  </div>\n</div>",
                styles: ["#stepset-container{padding:10px;box-shadow:0 0 5px rgba(0,0,0,.2);margin:20px;border-radius:4px}#buttons{margin-top:20px;position:relative;display:-webkit-box;display:flex}#buttons button{font-size:1.1em;border:1px solid #ccc;background:#fff;border-radius:4px;padding:10px 15px;margin-right:10px;box-shadow:2px 4px 5px rgba(0,0,0,.2)}#buttons button:focus{outline:0}#buttons button:hover{background-color:#f7f7f7}.btn-left{-webkit-box-pack:left;justify-content:left}.btn-apart{-webkit-box-pack:justify;justify-content:space-between}.btn-right{-webkit-box-pack:end;justify-content:flex-end}.btn-center{-webkit-box-pack:center;justify-content:center}#step-nav{display:-webkit-box;display:flex;-webkit-box-pack:justify;justify-content:space-between;position:relative}#step-nav p{line-height:1.4;padding-top:6px;display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center}#step-nav div{cursor:pointer;display:inline-block;width:40px;height:40px;line-height:3;text-align:center;border-radius:50%;z-index:1;background:#ccc;position:relative}#step-nav div:after,#step-nav div:before{position:absolute;left:0;top:0;display:inline-block;border-radius:50%}#step-nav div:after{content:\"\";width:50px;height:50px;background-color:transparent;border:6px solid #fff;-webkit-transform:translate(-10%,-10%);transform:translate(-10%,-10%)}#step-nav div:before{content:\"\\2713\";width:inherit;background-color:#1b9e0b;color:#fff;opacity:0;-webkit-transition:opacity 1s;transition:opacity 1s}#step-nav div.validStep:before{opacity:1}#progress-container{stroke:#ccc}#progress-content{stroke:green}#progress-content line{-webkit-transform:translateX(-100%);transform:translateX(-100%);-webkit-transition:.6s cubic-bezier(.39,.575,.565,1);transition:.6s cubic-bezier(.39,.575,.565,1)}#line-progress{position:absolute;width:100%;top:16px}#svg{stroke-dashoffset:0;stroke:#ccc;stroke-width:5px}#svg #bar{stroke:green;-webkit-transition:stroke-dashoffset 1s;transition:stroke-dashoffset 1s}.title{margin-top:-10px;display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-flow:column;margin-left:18px;font-size:1.5em;line-height:1.2}#content-container{padding:10px}.step-display{position:absolute;-webkit-transform:translate(100%,200%);transform:translate(100%,200%);left:-1%}@media (min-width:768px){#content-container{padding:20px 30px;margin-top:40px}#xs-progress{display:none}#lg-progress{display:block;padding:10px 35px}}@media (max-width:426px){#xs-progress{display:inline-block;position:relative;display:-webkit-box;display:flex}#lg-progress{display:none}}"]
            }] }
];
/** @nocollapse */
StepsetComponent.ctorParameters = () => [
    { type: Renderer2 }
];
StepsetComponent.propDecorators = {
    progressbar: [{ type: ViewChild, args: ['progressbar',] }],
    styles: [{ type: Input, args: ['finishBtn',] }],
    btnPos: [{ type: Input, args: ['btnPos',] }],
    next: [{ type: Output }],
    circularBar: [{ type: ViewChild, args: ['bar',] }],
    submitEvent: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    StepsetComponent.prototype.steps;
    /** @type {?} */
    StepsetComponent.prototype.stepNo;
    /** @type {?} */
    StepsetComponent.prototype.totalSteps;
    /** @type {?} */
    StepsetComponent.prototype.progressValue;
    /** @type {?} */
    StepsetComponent.prototype.strokeDashOffset;
    /** @type {?} */
    StepsetComponent.prototype.progressbar;
    /** @type {?} */
    StepsetComponent.prototype.styles;
    /** @type {?} */
    StepsetComponent.prototype.btnPos;
    /** @type {?} */
    StepsetComponent.prototype.next;
    /** @type {?} */
    StepsetComponent.prototype.circularBar;
    /** @type {?} */
    StepsetComponent.prototype.submitEvent;
    /** @type {?} */
    StepsetComponent.prototype.radius;
    /**
     * @type {?}
     * @private
     */
    StepsetComponent.prototype.rd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHNldC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9zdGVwcGVyLWxpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvc3RlcHNldC9zdGVwc2V0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFRakgsTUFBTSxPQUFPLGdCQUFnQjs7OztJQWMzQixZQUFvQixFQUFhO1FBQWIsT0FBRSxHQUFGLEVBQUUsQ0FBVztRQVpqQyxVQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ1gsV0FBTSxHQUFHLENBQUMsQ0FBQztRQUNYLGVBQVUsR0FBRyxDQUFDLENBQUM7UUFLRSxXQUFNLEdBQVksVUFBVSxDQUFDO1FBQ3BDLFNBQUksR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUVqRCxnQkFBVyxHQUEwQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2xFLFdBQU0sR0FBVyxFQUFFLENBQUM7UUFFbEIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDcEQsQ0FBQzs7OztJQUVELFFBQVE7SUFDUixDQUFDOzs7O0lBQ0QsZUFBZTtRQUNiLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztJQUM5QixDQUFDOzs7OztJQUVELE9BQU8sQ0FBQyxJQUFJO1FBQ1YsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQyxDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxDQUFDO1FBQ1YsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMs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Y2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIElucHV0LCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3N0ZXBzZXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vc3RlcHNldC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3N0ZXBzZXQuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBTdGVwc2V0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBzdGVwcyA9IFtdO1xuICBzdGVwTm8gPSAwO1xuICB0b3RhbFN0ZXBzID0gMDtcbiAgcHJvZ3Jlc3NWYWx1ZTogbnVtYmVyO1xuICBzdHJva2VEYXNoT2Zmc2V0OiBudW1iZXI7XG4gIEBWaWV3Q2hpbGQoJ3Byb2dyZXNzYmFyJykgcHJvZ3Jlc3NiYXI6IEVsZW1lbnRSZWY7XG4gIEBJbnB1dCgnZmluaXNoQnRuJykgc3R5bGVzPzogYW55O1xuICBASW5wdXQoJ2J0blBvcycpIGJ0blBvcz86IHN0cmluZyA9ICdidG4tbGVmdCc7XG4gIEBPdXRwdXQoKSBuZXh0OiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBWaWV3Q2hpbGQoJ2JhcicpIGNpcmN1bGFyQmFyOiBFbGVtZW50UmVmO1xuICBAT3V0cHV0KCkgc3VibWl0RXZlbnQ6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgcmFkaXVzOiBudW1iZXIgPSAzNTtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZDogUmVuZGVyZXIyKSB7XG4gICAgdGhpcy5zdHJva2VEYXNoT2Zmc2V0ID0gTWF0aC5QSSAqIDIgKiB0aGlzLnJhZGl1cztcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnN0ZXBzWzBdLmFjdGl2ZSA9IHRydWU7XG4gIH1cblxuICBhZGRTdGVwKHN0ZXApIHtcbiAgICB0aGlzLnRvdGFsU3RlcHMgPSB0aGlzLnN0ZXBzLnB1c2goc3RlcCk7XG4gIH1cblxuICBqdW1wVG9TdGVwKGkpIHtcbiAgICBpZiAodGhpcy5zdGVwc1tpID4gMCA/IGkgLSAxIDogaV0udmFsaWQpIHtcbiAgICAgIHRoaXMuc3RlcE5vID0gaTtcbiAgICAgIHRoaXMuc2V0QWN0aXZlU3RlcCh0aGlzLnN0ZXBObyk7XG4gICAgfVxuICB9XG5cbiAgbmV4dFN0ZXAoKSB7XG4gICAgaWYgKHRoaXMuc3RlcHNbdGhpcy5zdGVwTm9dLmZvcm1bMF1bJ3ZhbGlkJ10pIHtcbiAgICAgIHRoaXMuc3RlcHNbdGhpcy5zdGVwTm9dLnZhbGlkID0gdHJ1ZTtcbiAgICAgIHRoaXMuc3RlcE5vIDwgdGhpcy50b3RhbFN0ZXBzID8gdGhpcy5zZXRBY3RpdmVTdGVwKCsrdGhpcy5zdGVwTm8pIDogbnVsbDtcbiAgICAgIHRoaXMubmV4dC5lbWl0KHRoaXMuc3RlcHNbdGhpcy5zdGVwTm9dLnZhbGlkKTtcbiAgICB9XG5cbiAgfVxuXG4gIHNldFByb2dyZXNzYmFyQ29sb3IoKSB7XG4gICAgdGhpcy5wcm9ncmVzc1ZhbHVlID0gTWF0aC5mbG9vcigxMDAgLyAodGhpcy50b3RhbFN0ZXBzIC0gMSkpICogdGhpcy5zdGVwTm8gLSAxMDA7XG4gICAgdGhpcy5yZC5zZXRTdHlsZSh0aGlzLmNpcmN1bGFyQmFyLm5hdGl2ZUVsZW1lbnQsICdzdHJva2UtZGFzaG9mZnNldCcsICgoMTAwIC0gdGhpcy5wcm9ncmVzc1ZhbHVlKSAvIDEwMCkgKiAoTWF0aC5QSSAqICgyICogdGhpcy5yYWRpdXMpKSAtIHRoaXMuc3Ryb2tlRGFzaE9mZnNldClcbiAgfVxuXG4gIHByZXZTdGVwKCkge1xuICAgIHRoaXMuc3RlcE5vID4gMCA/IHRoaXMuc2V0QWN0aXZlU3RlcCgtLXRoaXMuc3RlcE5vKSA6IG51bGw7XG4gIH1cblxuICBzZXRBY3RpdmVTdGVwKGluZGV4KSB7XG4gICAgdGhpcy5zZXRQcm9ncmVzc2JhckNvbG9yKCk7XG4gICAgdGhpcy5zdGVwcy5mb3JFYWNoKHMgPT4ge1xuICAgICAgcy5hY3RpdmUgPSBmYWxzZTtcbiAgICB9KTtcbiAgICB0aGlzLnN0ZXBzW2luZGV4XS5hY3RpdmUgPSB0cnVlO1xuICB9XG5cbiAgc3VibWl0KCkge1xuICAgIHRoaXMuc3VibWl0RXZlbnQuZW1pdCh0cnVlKTtcbiAgfVxuXG59XG4iXX0=